package com.psl;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;

@Aspect
public class TicketCollector {
	@Pointcut(value = "execution(* com.psl.Train.departFromSource(String,String)) && args(source,time)")
	public void pc1(String source, String time) {

	}

	@Pointcut(value = "execution(* com.psl.Train.arriveAtDestination(String,String)) && args(destination,time)")
	public void pc2(String destination, String time) {

	}

	public void entersTrain() {
		System.out.println("TC enters the Train.");
	}

	public void exitsTrain() {
		System.out.println("TC exits the Train.");
	}

	public void checksTickets() {
		System.out.println("TC checks Passengers tickets.");
		collectsFine();
	}

	public void collectsFine() {
		System.out.println("TC collects fine from Defaulters.");
	}

	public void printsPassengerList() {
		System.out.println("TC prints passenger list.");
	}

	public void checkPassengerList() {
		System.out.println("TC checks passenger list.");
	}

	public void depositFine() {
		System.out.println("TC deposits fine at station.");
	}

	@Around(value = "pc1(source, time)")
	public void doWork(ProceedingJoinPoint joinPoint, String source, String time) {
		// Before
		printsPassengerList();
		entersTrain();
		// During
		try {
			joinPoint.proceed(); // Calling Train.depart()
			System.out.println("Train running...");
		} catch (Throwable e) {
			e.printStackTrace();
			System.out.println("Train Delayed at " + source);
		}
		// After
		checksTickets();
	}

	@Around(value = "pc2(destination, time)")
	public void finishWork(ProceedingJoinPoint joinPoint, String destination,
			String time) {
		// Before
		checkPassengerList();
		// During
		try {
			joinPoint.proceed(); // Calling Performer.perform()
		} catch (Throwable e) {
			e.printStackTrace();
			System.out.println("Train Delayed at " + destination);
		}
		// After
		depositFine();
	}
}